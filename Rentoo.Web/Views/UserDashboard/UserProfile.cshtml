@model Rentoo.Domain.Entities.User
@using RM = Rentoo.Domain.Shared.Localization.Global;
@{
    //layput
    Layout = "~/Views/Shared/_EndUserLayout.cshtml";
    ViewData["Title"] = "User Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f2f3f5;
            color: #333;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        .dashboard-sidebar {
            width: 280px;
            background: #1a1a2e;
            color: #fff;
            padding-top: 40px;
        }

        .sidebar-brand {
            text-align: center;
            margin-bottom: 30px;
            padding: 0 20px;
        }

            .sidebar-brand img {
                max-width: 120px;
            }

        .sidebar-item {
            padding: 15px 25px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: 0.3s;
            color: #c9c9c9;
            font-weight: 500;
            margin: 5px 15px;
            border-radius: 8px;
        }

            .sidebar-item i {
                margin-right: 12px;
                width: 20px;
                text-align: center;
            }

            .sidebar-item:hover,
            .sidebar-item.active {
                background: #ea001e;
                color: #fff;
            }

        .dashboard-content {
            flex: 1;
            padding: 40px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

            .page-header h1 {
                font-size: 24px;
                font-weight: 700;
                color: #333;
            }

        .nav-tabs {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
            background: #fff;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .nav-tab {
            padding: 12px 20px;
            border-radius: 8px;
            text-decoration: none;
            color: #777;
            font-weight: 500;
            transition: 0.3s;
        }

            .nav-tab:hover {
                color: #ea001e;
            }

            .nav-tab.active {
                background-color: #ea001e;
                color: #fff;
            }

            .nav-tab i {
                margin-right: 8px;
            }

        .profile-section {
            background: #fff;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

            .profile-section h2 {
                font-size: 20px;
                font-weight: 600;
                margin-bottom: 25px;
                color: #333;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
            }

        .profile-picture-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .profile-picture {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            overflow: hidden;
            border: 3px solid #ea001e;
            position: relative;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(233, 30, 99, 0.2);
        }

            .profile-picture img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .edit-icon {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background: #ea001e;
            color: white;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            border: 2px solid #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            flex: 1 1 300px;
        }

            .form-group label {
                font-weight: 500;
                margin-bottom: 8px;
                display: block;
                color: #555;
            }

        .form-control {
            width: 100%;
            padding: 14px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 15px;
            transition: 0.2s;
            background-color: #f9f9f9;
        }

            .form-control:focus {
                border-color: #ea001e;
                outline: none;
                box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
                background-color: #fff;
            }

            .form-control:disabled {
                background-color: #f0f0f0;
            }

        /* Fix for date input */
        input[type="date"].form-control {
            padding: 13px 15px;
            -webkit-appearance: none;
            appearance: none;
            color: #333;
        }

        /* Make sure the date picker icon is visible */
        input[type="date"]::-webkit-calendar-picker-indicator {
            opacity: 1;
            display: block;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="15" viewBox="0 0 24 24"><path fill="%23e91e63" d="M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z"/></svg>');
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .text-danger {
            font-size: 13px;
            color: #ea001e;
            margin-top: 5px;
        }

        .btn-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
        }

        .save-changes-btn {
            background-color: #ea001e;
            color: white;
            padding: 14px 30px;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: 0.3s;
            box-shadow: 0 4px 10px rgba(233, 30, 99, 0.2);
        }

            .save-changes-btn:hover {
                background-color: #212529;
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(233, 30, 99, 0.3);
            }

        .cancel-btn {
            background-color: #f0f0f0;
            color: #666;
            padding: 14px 30px;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: 0.3s;
        }

            .cancel-btn:hover {
                background-color: #e0e0e0;
            }

        /* User info badge */
        .user-info {
            display: flex;
            align-items: center;
            padding: 20px 25px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: auto;
            background: rgba(255, 255, 255, 0.05);
            position: absolute;
            bottom: 0;
            width: 100%;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            margin-right: 10px;
        }

            .user-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .user-details {
            flex: 1;
        }

            .user-details h4 {
                font-size: 14px;
                margin: 0;
                color: #fff;
            }

            .user-details p {
                font-size: 12px;
                margin: 0;
                color: rgba(255, 255, 255, 0.6);
            }

        .logout-btn {
            color: #e91e63;
            font-size: 18px;
            background: none;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-content">
            <div class="page-header">
                <h1>@RM.Global.UserDashboard</h1>
            </div>

            <div class="nav-tabs">
                <a href="@Url.Action("UserProfile", "UserDashboard")" class="nav-tab active"><i class="fas fa-user"></i>@RM.Global.MyAccount</a>
                <a href="@Url.Action("MyCar", "UserDashboard")" class="nav-tab"><i class="fas fa-car"></i> @RM.Global.MYCARS</a>
                <a href="@Url.Action("MyRequests", "UserDashboard")" class="nav-tab "><i class="fas fa-file-alt"></i>@RM.Global.MyRequests</a>
                <a href="@Url.Action("Reviews", "UserDashboard")" class="nav-tab "><i class="fas fa-star"></i> @RM.Global.REVIEWS</a>
                <a href="@Url.Action("PricePlans", "UserDashboard")" class="nav-tab"><i class="fas fa-tags"></i> @RM.Global.PRICEPLANS</a>
            </div>
            @using (Html.BeginForm("UserProfile", "UserDashboard", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="profile-section">
                    <h2>@RM.Global.YourProfilePicture</h2>
                    <div class="profile-picture-container">
                        <div class="profile-picture">
                            @if (string.IsNullOrEmpty(Model.UserImage))
                            {
                                <img src="https://via.placeholder.com/150" alt="Profile Picture" id="profile-img-preview" />
                            }
                            else
                            {
                                <img src="/@Model.UserImage" alt="Profile Picture" id="profile-img-preview" />
                            }
                            <span class="edit-icon"><i class="fas fa-camera"></i></span>
                        </div>
                        <input type="file" id="profile-image-input" name="ProfileImage" accept="image/png, image/jpeg, image/jpg, image/gif" style="display: none;" onchange="validateImageFile(this)" />
                    </div>
                </div>
                <div class="profile-section">
                 <h2>@RM.Global.PersonalInformation:</h2>
                    @Html.HiddenFor(model => model.Id)  
                    <div class="form-row">
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.FirstName</label>
                            @Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.LastName</label>
                            @Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.Email</label>
                            @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control", type = "email", placeholder = "Email Address" } })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.BirthDate</label>
                            @Html.TextBoxFor(model => model.BirthDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date" })
                            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.PhoneNumber</label>
                            @Html.EditorFor(m => m.PhoneNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone Number" } })
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="FirstName">@RM.Global.Address</label>
                            @Html.EditorFor(m => m.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Full Address" } })
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="btn-actions">
                        <button type="submit" class="save-changes-btn">@RM.Global.SaveChanges</button>
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const profilePicture = document.querySelector('.profile-picture');
            const profileImageInput = document.getElementById('profile-image-input');
            const profileImgPreview = document.getElementById('profile-img-preview');

            profilePicture.addEventListener('click', function () {
                profileImageInput.click();
            });

            profileImageInput.addEventListener('change', function () {
                if (validateImageFile(this)) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        profileImgPreview.src = e.target.result;
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });
        });

        function validateImageFile(input) {
            const file = input.files[0];
            if (file) {
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
                if (!validTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPG, JPEG, PNG, or GIF)');
                    input.value = '';
                    return false;
                }
                const maxSize = 5 * 1024 * 1024; // 5MB
                if (file.size > maxSize) {
                    alert('File size must be less than 5MB');
                    input.value = '';
                    return false;
                }
                return true;
            }
            return false;
        }
    </script>
</body>
</html>